package employee.database;

/* 
 * Course: ICS 4U0
 * Date: June 8, 2015
 * Project Name: Employee Database
 * By: Jiamin Wang and Abigail Sy
 * Teacher: Mr. Dutton
 * Purpose: This program processes information of employees
 *          There are two types of employees - full time and part time
 *          both of which are processed with the attributes of 
 *          name, employee number, gender, salary, and deduction rate
 *          The salary information for an employee differs depending on
 *          the type of employee. In the program, employees can be manipulated
 *          by adding, deleting, searching, and editing an employee.
 *          Additionally, the employee's data can be saved into a text file or
 *          uploaded from a text file. In general, this program's purpose is to
 *          help the user easily organize, store, and modify employee's data
 *          in the workplace
 */
//import necessary classes
import java.io.IOException;
import java.text.DecimalFormat;

public class UserInterface extends javax.swing.JFrame {

    //Creates new form UserInterface
    public UserInterface() {
        initComponents();

        //set all components for the add function as invisible
        tabbedPane.setVisible(false);
        label1.setVisible(false);
        label2.setVisible(false);
        label3.setVisible(false);
        label4.setVisible(false);
        label5.setVisible(false);
        gender.setVisible(false);
        employeeName.setVisible(false);
        addedNum.setVisible(false);
        deductionsR.setVisible(false);
        addEmployee.setVisible(false);
        saveEdit.setVisible(false);
    }
    //new hash table named openHash was created
    HashTable openHash = new HashTable();
    //a class is imported for rounding decimals to the second decimal place
    DecimalFormat formatSalary = new DecimalFormat("#.00");
    //a constant is made for the path so it is easy to alter the path of the saved file
    public static final String FILENAME = "Employee_Data.txt";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        employeeNumber = new javax.swing.JTextField();
        addEmployee = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayField = new javax.swing.JTextArea();
        edit = new javax.swing.JButton();
        print = new javax.swing.JButton();
        save = new javax.swing.JButton();
        saveEdit = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        yearlySalary = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        hourlyWage = new javax.swing.JTextField();
        hoursPerWeek = new javax.swing.JTextField();
        weeksPerYear = new javax.swing.JTextField();
        employeeName = new javax.swing.JTextField();
        label1 = new javax.swing.JLabel();
        addedNum = new javax.swing.JTextField();
        label2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        read = new javax.swing.JButton();
        calculate = new javax.swing.JButton();
        label3 = new javax.swing.JLabel();
        deductionsR = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        gender = new javax.swing.JComboBox();
        label4 = new javax.swing.JLabel();
        label5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        jLabel1.setText("Employee Database");

        employeeNumber.setAutoscrolls(false);
        employeeNumber.setName(""); // NOI18N
        employeeNumber.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeNumberMouseClicked(evt);
            }
        });
        employeeNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeNumberActionPerformed(evt);
            }
        });

        addEmployee.setText("Add Employee");
        addEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        displayField.setColumns(20);
        displayField.setRows(5);
        jScrollPane1.setViewportView(displayField);

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        saveEdit.setText("Save Edits");
        saveEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEditActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setText("Yearly Salary");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(yearlySalary, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearlySalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Full Time Employee", jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("Hourly Wage");

        jLabel4.setText("Hours per Week");

        jLabel5.setText("Weeks per Year");

        hourlyWage.setToolTipText("");
        hourlyWage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourlyWageActionPerformed(evt);
            }
        });

        hoursPerWeek.setToolTipText("");

        weeksPerYear.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(weeksPerYear, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hoursPerWeek, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(hourlyWage))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hourlyWage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoursPerWeek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weeksPerYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Part Time Employee", jPanel2);

        employeeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeNameActionPerformed(evt);
            }
        });

        label1.setText("Full Name");

        addedNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addedNumActionPerformed(evt);
            }
        });

        label2.setText("Employee Number");

        jLabel8.setText("Select Employee Number");

        read.setText("Read");
        read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readActionPerformed(evt);
            }
        });

        calculate.setText("Calculate Net Income");
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });

        label3.setText("Deductions Rate");

        deductionsR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deductionsRActionPerformed(evt);
            }
        });

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        gender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));
        gender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderActionPerformed(evt);
            }
        });

        label4.setText("Sex");

        label5.setText("%");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(saveEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addEmployee)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addedNum, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label1)
                                        .addGap(73, 73, 73)
                                        .addComponent(employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(deductionsR, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label5)))
                        .addGap(199, 199, 199)
                        .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(save, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(read, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(calculate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(print, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(edit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(search, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(add, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(employeeNumber))
                                .addGap(38, 38, 38))))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(employeeNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(print)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(read)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calculate))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label1)
                            .addComponent(employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label2)
                            .addComponent(addedNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(label3)
                            .addComponent(deductionsR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label5))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveEdit)
                            .addComponent(addEmployee)))
                    .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void employeeNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeNumberActionPerformed

    private void employeeNumberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeNumberMouseClicked
    }//GEN-LAST:event_employeeNumberMouseClicked

    //this method adds what was entered by the user into the hash table as an employee
    private void addEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeActionPerformed
        //retrieve the employee number, name, deduction rate, and gender using getText method
        int eNum = Integer.parseInt(addedNum.getText());
        String eName = employeeName.getText();
        double dRate = Double.parseDouble(deductionsR.getText());

        int selectedGender = gender.getSelectedIndex();

        String eGender;
        if (selectedGender == 0) {
            eGender = "Male";
        } else {
            eGender = "Female";
        }

        //new employee object named searched employee 
        //is used to verify that the added employee does not have the same number as any previous employees
        Employee searchedEmployee = openHash.search(eNum);

        //if there are repeats of employee number, then proceed to add employee into the hash table
        if (searchedEmployee == null) {
            // check using the tabbed pane to see if the employee is of type full time or part time
            if (tabbedPane.getSelectedIndex() == 0) {
                double salary = Double.parseDouble(yearlySalary.getText());

                //a new full time employee is created with what was entered in the text field
                FullTimeEmployee someEmployee = new FullTimeEmployee(eNum, eName, eGender, salary, dRate);

                //add method in the hash table class was used to add the employee to the hash table
                openHash.add(someEmployee);
                //if employee is part time, same process as above applies, only with different variables
            } else if (tabbedPane.getSelectedIndex() == 1) {
                double eWage = Double.parseDouble(hourlyWage.getText());
                float hours = Float.parseFloat(hoursPerWeek.getText());
                int weeks = Integer.parseInt(weeksPerYear.getText());
                PartTimeEmployee someEmployee = new PartTimeEmployee(eNum, eName, eGender, eWage, hours, weeks, dRate);
                openHash.add(someEmployee);
            }
        } else {
            //if the added employee's number matches any previous employee's, then an error message is displayed
            displayField.setText("Error: Employee Number Already Exists");
        }

        //all text fields are set to empty
        employeeName.setText(null);
        addedNum.setText(null);
        deductionsR.setText(null);
        yearlySalary.setText(null);
        hourlyWage.setText(null);
        hoursPerWeek.setText(null);
        weeksPerYear.setText(null);

        //after employee is added, these fields are set back to invisible
        tabbedPane.setVisible(false);
        label1.setVisible(false);
        label2.setVisible(false);
        label3.setVisible(false);
        label4.setVisible(false);
        label5.setVisible(false);
        gender.setVisible(false);
        employeeName.setVisible(false);
        addedNum.setVisible(false);
        deductionsR.setVisible(false);
        addEmployee.setVisible(false);
        saveEdit.setVisible(false);
    }//GEN-LAST:event_addEmployeeActionPerformed

    private void employeeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeNameActionPerformed

    private void hourlyWageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourlyWageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hourlyWageActionPerformed

//this method prints out all of the employees in the hash table
    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        //uses the hash table class to find the number of buckets
        int numBuckets = openHash.returnBuckets();

        //an empty string was initialized to store all the employees
        //so they can be printed at the same time
        String info = "";

        //go through each bucket
        for (int i = 0; i < numBuckets; i++) {
            //find the size of the bucket and store it in "size"
            int size = openHash.returnBranchSize(i);

            //go through each branch once
            for (int j = 0; j < size; j++) {
                //if the field is empty, "info" does not change
                if (openHash.printHash(i, j) == null) {
                    info = info + "";
                } else { //if an employee is stored
                    //an object of type employee named someEmployee is made with its properties attached to it
                    Employee someEmployee = openHash.printHash(i, j);

                    //checking if someEmployee is full time or part time
                    if (someEmployee instanceof FullTimeEmployee) {
                        //the employee is casted as a full time employee
                        FullTimeEmployee fTEmp = (FullTimeEmployee) someEmployee;

                        //store each property in a "info", then its added to "info"
                        //as this loop repeats, the next employee's info attaches onto the variable "info"
                        //thus when it is printed, all the employees would be printed
                        String info0 = ("Type: Full Time Employee");
                        String info1 = ("First Name: " + fTEmp.firstName);
                        String info2 = ("Employee Number: " + fTEmp.employeeNumber);
                        String info3 = ("Gender: " + fTEmp.gender);
                        String info4 = ("Yearly Salary: $" + formatSalary.format(fTEmp.yearlySalary));
                        String info5 = ("Deductions Rate: " + fTEmp.deductionsRate + "%");

                        info = info + (info0 + "\n" + info1 + "\n" + info2 + "\n" + info3 + "\n" + info4 + "\n" + info5 + "\n" + "\n");
                    } else if (someEmployee instanceof PartTimeEmployee) {
                        //a similar procedure as above is applied to part time employees
                        PartTimeEmployee pTEmp = (PartTimeEmployee) someEmployee;
                        String info0 = ("Type: Full Time Employee");
                        String info1 = ("First Name: " + pTEmp.firstName);
                        String info2 = ("Employee Number: " + pTEmp.employeeNumber);
                        String info3 = ("Gender: " + pTEmp.gender);
                        String info4 = ("Hourly Wage: $" + formatSalary.format(pTEmp.hourlyWage));
                        String info5 = ("Hours Per Week: " + pTEmp.hoursPerWeek);
                        String info6 = ("Weeks Per Year: " + pTEmp.weeksPerYear);
                        String info7 = ("Deductions Rate: " + pTEmp.deductionsRate + "%");

                        info = info + (info0 + "\n" + info1 + "\n" + info2 + "\n" + info3 + "\n" + info4 + "\n" + info5 + "\n" + info6 + "\n" + info7 + "\n" + "\n");
                    }
                }
            }
        }

        //what was stored in the "info" variable after all the loops was displayed in the display field
        displayField.setText(info);

        //clear the employee number field for future uses
        employeeNumber.setText(null);
    }//GEN-LAST:event_printActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        displayField.setText(null);
        //retrieve the entered employee number
        //uses the remove method in the hash table to delete that particular employee
        int eNum = Integer.parseInt(employeeNumber.getText());
        Employee someEmployee = openHash.remove(eNum);

        //the information of the deleted employee is displayed on the text field for the user's reference

        //this if..else statement checks if the employee is full time or part time
        if (someEmployee instanceof FullTimeEmployee) {
            //cast as a full time employee
            FullTimeEmployee fTEmp = (FullTimeEmployee) someEmployee;

            //each piece of information is added to a string numbered from info0 to info5/7
            //in order for them all in the final displayfield.setText() method.
            String info0 = ("You successfully deleted:");
            String info1 = ("Type: Full Time Employee");
            String info2 = ("First Name: " + fTEmp.firstName);
            String info3 = ("Employee Number: " + fTEmp.employeeNumber);
            String info4 = ("Gender: " + fTEmp.gender);
            String info5 = ("Yearly Salary: $" + formatSalary.format(fTEmp.yearlySalary));
            String info6 = ("Deductions Rate: $" + fTEmp.deductionsRate);

            displayField.setText(info0 + "\n" + "\n" + info1 + "\n" + info2 + "\n" + info3 + "\n" + info4 + "\n" + info5 + "\n" + info6);

        } else if (someEmployee instanceof PartTimeEmployee) {
            //a similar method is used on part time employees
            PartTimeEmployee pTEmp = (PartTimeEmployee) someEmployee;
            String info0 = ("You successfully deleted:");
            String info1 = ("Type: Part Time Employee");
            String info2 = ("First Name: " + pTEmp.firstName);
            String info3 = ("Employee Number: " + pTEmp.employeeNumber);
            String info4 = ("Gender: " + pTEmp.gender);
            String info5 = ("Hourly Wage: $" + formatSalary.format(pTEmp.hourlyWage));
            String info6 = ("Hours Per Week: " + pTEmp.hoursPerWeek);
            String info7 = ("Weeks Per Year: " + pTEmp.weeksPerYear);
            String info8 = ("Deductions Rate: $" + pTEmp.deductionsRate);

            displayField.setText(info0 + "\n" + "\n" + info1 + "\n" + info2 + "\n" + info3 + "\n" + info4 + "\n" + info5 + "\n" + info6 + "\n" + info7 + "\n" + info8);
        } else if (someEmployee == null) {
            //if the entered employee number does not match anything in the has table
            //a null result will be returned to someEmployee
            //in this case, an error message is displayed
            displayField.setText("No employee found");
        }
        //clear the employee number field for future uses
        employeeNumber.setText(null);
    }//GEN-LAST:event_deleteActionPerformed

    //this method uses an entered employee number to search for an employee's info
    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        displayField.setText(null);

        //uses the entered employee number
        //inserts this number in the search method in the hash table class to return an specific employee
        int eNum = Integer.parseInt(employeeNumber.getText());
        Employee someEmployee = openHash.search(eNum);

        //all the information for that employee is displayed
        //this procedure is similar to the "delete" method
        if (someEmployee instanceof FullTimeEmployee) {
            FullTimeEmployee fTEmp = (FullTimeEmployee) someEmployee;
            String info0 = ("Type: Full Time Employee");
            String info1 = ("First Name: " + fTEmp.firstName);
            String info2 = ("Employee Number: " + fTEmp.employeeNumber);
            String info3 = ("Gender: " + fTEmp.gender);
            String info4 = ("Yearly Salary: $" + formatSalary.format(fTEmp.yearlySalary));
            String info5 = ("Deductions Rate: " + fTEmp.deductionsRate + "%");

            displayField.setText(info0 + "\n" + info1 + "\n" + info2 + "\n" + info3 + "\n" + info4 + "\n" + info5);
        } else if (someEmployee instanceof PartTimeEmployee) {
            PartTimeEmployee pTEmp = (PartTimeEmployee) someEmployee;
            String info0 = ("Type: Full Time Employee");
            String info1 = ("First Name: " + pTEmp.firstName);
            String info2 = ("Employee Number: " + pTEmp.employeeNumber);
            String info3 = ("Gender: " + pTEmp.gender);
            String info4 = ("Hourly Wage: $" + formatSalary.format(pTEmp.hourlyWage));
            String info5 = ("Hours Per Week: " + pTEmp.hoursPerWeek);
            String info6 = ("Weeks Per Year: " + pTEmp.weeksPerYear);
            String info7 = ("Deductions Rate: " + pTEmp.deductionsRate + "%");

            displayField.setText(info0 + "\n" + info1 + "\n" + info2 + "\n" + info3 + "\n" + info4 + "\n" + info5 + "\n" + info6 + "\n" + info7);
        } else if (someEmployee == null) {
            //if the entered employee number does not match anything in the has table
            //a null result will be returned to someEmployee
            //in this case, an error message is displayed
            displayField.setText("No employee found");
        }
        //clear the employee number field for future uses
        employeeNumber.setText(null);
    }//GEN-LAST:event_searchActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        displayField.setText(null);

        //the entered employee number was used to search for a particular employee - someEmployee
        int eNum = Integer.parseInt(employeeNumber.getText());
        Employee someEmployee = openHash.search(eNum);

        //if the employee is not found, an error message is displayed
        if (someEmployee == null) {
            displayField.setText("No employee found. Please add an employee before editing");
            //otherwise, procceed to displaying that employee's information for editing
        } else {

            //the fields to modify properties of an employee is set to visible
            tabbedPane.setVisible(true);
            label1.setVisible(true);
            label2.setVisible(true);
            label3.setVisible(true);
            label4.setVisible(true);
            label5.setVisible(true);
            gender.setVisible(true);
            employeeName.setVisible(true);
            addedNum.setVisible(true);
            deductionsR.setVisible(true);
            addEmployee.setVisible(false);
            saveEdit.setVisible(true);

            //uploading name into the text field
            employeeName.setText(someEmployee.firstName);

            //uploading number and deductions rate
            addedNum.setText(String.valueOf(someEmployee.employeeNumber));
            deductionsR.setText(String.valueOf(someEmployee.deductionsRate));

            //uploading gender
            if (someEmployee.gender.equals("Male")) {
                gender.setSelectedIndex(0);
            } else if (someEmployee.gender.equals("Female")) {
                gender.setSelectedIndex(1);
            }

            //checking if the employee to edit is a full time or part time employee
            if (someEmployee instanceof FullTimeEmployee) {
                // We know that the employee is a FTE, so cast (type casting) it such.
                FullTimeEmployee fullTimeEmp = (FullTimeEmployee) someEmployee;

                //uploading type
                tabbedPane.setSelectedIndex(0);

                //uploading salary
                String salaryToChange = String.valueOf(fullTimeEmp.yearlySalary);
                yearlySalary.setText(salaryToChange);
            }
            if (someEmployee instanceof PartTimeEmployee) {
                // We know that the employee is a FTE, so cast (type casting) it such.
                PartTimeEmployee partTimeEmp = (PartTimeEmployee) someEmployee;

                //uploading type
                tabbedPane.setSelectedIndex(1);

                //uploading wage, hours, and weeks/year
                String wageToChange = String.valueOf(partTimeEmp.hourlyWage);
                hourlyWage.setText(wageToChange);

                String hoursToChange = String.valueOf(partTimeEmp.hoursPerWeek);
                hoursPerWeek.setText(hoursToChange);

                String weeksToChange = String.valueOf(partTimeEmp.weeksPerYear);
                weeksPerYear.setText(weeksToChange);
            }
            //clear the employee number field for future uses
            employeeNumber.setText(null);
        }
    }//GEN-LAST:event_editActionPerformed

    private void addedNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addedNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addedNumActionPerformed

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    //this method saves the modifications applied to the selected employee
    //to do this, the employee has to first be removed, then be re-added
    private void saveEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEditActionPerformed
        displayField.setText(null);

        //the employee was removed
        int eNumSearched = Integer.parseInt(addedNum.getText());
        openHash.remove(eNumSearched);

        //a procedure similar to "addEmployees" was used here to add the modifications back into the has table
        String eName = employeeName.getText();
        double dRate = Double.parseDouble(deductionsR.getText());

        int selectedGender = gender.getSelectedIndex();

        String eGender;

        if (selectedGender == 0) {
            eGender = "Male";
        } else {
            eGender = "Female";
        }

        // add to hash table
        if (tabbedPane.getSelectedIndex() == 0) {
            double salary = Double.parseDouble(yearlySalary.getText());
            FullTimeEmployee someEmployee = new FullTimeEmployee(eNumSearched, eName, eGender, salary, dRate);
            openHash.add(someEmployee);
        } else if (tabbedPane.getSelectedIndex() == 1) {
            double eWage = Double.parseDouble(yearlySalary.getText());
            float hours = Float.parseFloat(hoursPerWeek.getText());
            int weeks = Integer.parseInt(weeksPerYear.getText());
            PartTimeEmployee someEmployee = new PartTimeEmployee(eNumSearched, eName, eGender, eWage, hours, weeks, dRate);
            openHash.add(someEmployee);
        }

        //all the fields are set to null to allow easy future addings
        employeeName.setText(null);
        addedNum.setText(null);
        yearlySalary.setText(null);
        hourlyWage.setText(null);
        hoursPerWeek.setText(null);
        weeksPerYear.setText(null);

        //after "Save Edits" is pressed, all the fields on the bottom half is set to invisible
        tabbedPane.setVisible(false);
        label1.setVisible(false);
        label2.setVisible(false);
        label3.setVisible(false);
        label4.setVisible(false);
        label5.setVisible(false);
        gender.setVisible(false);
        employeeName.setVisible(false);
        addedNum.setVisible(false);
        deductionsR.setVisible(false);
        addEmployee.setVisible(false);
        saveEdit.setVisible(false);
    }//GEN-LAST:event_saveEditActionPerformed

    //save employees stored on the hash table into a text file
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

        //a try and catch loop is used to 
        //display an error message to the user if something goes wrong

        //this try and catch loop overwrites the preexisting file before new information could be saved
        try {
            //a new object named data of type WriteFile
            WriteFile data = new WriteFile(FILENAME);
            data.overwriteFile();
        } catch (IOException e) {
            displayField.setText(e.getMessage());
        }

        //this part of the method is similar to the "print" method
        //in which the each branch in each bucket's information is saved on the textfile
        int numBuckets = openHash.returnBuckets();

        try {
            //these parameters allow things to be appended to the file
            WriteFile data = new WriteFile(FILENAME, true);

            for (int i = 0; i < numBuckets; i++) {
                int size = openHash.returnBranchSize(i);

                for (int j = 0; j < size; j++) {
                    if (openHash.printHash(i, j) == null) {
                    } else {
                        Employee someEmployee = openHash.printHash(i, j);

                        if (someEmployee instanceof FullTimeEmployee) {
                            FullTimeEmployee fTEmp = (FullTimeEmployee) someEmployee;
                            String info0 = ("Full Time");
                            String info1 = (fTEmp.firstName);
                            String info2 = Integer.toString(fTEmp.employeeNumber);
                            String info3 = (fTEmp.gender);
                            String info4 = formatSalary.format(fTEmp.yearlySalary);
                            String info5 = Double.toString(fTEmp.deductionsRate);

                            //every writeToFile would create a new line of text
                            data.writeToFile(info0);
                            data.writeToFile(info1);
                            data.writeToFile(info2);
                            data.writeToFile(info3);
                            data.writeToFile(info4);
                            data.writeToFile(info5);
                            data.writeToFile("");

                            //a similar procedure is applied to part time employees
                        } else if (someEmployee instanceof PartTimeEmployee) {
                            PartTimeEmployee pTEmp = (PartTimeEmployee) someEmployee;

                            String info0 = ("Part Time");
                            String info1 = (pTEmp.firstName);
                            String info2 = Integer.toString(pTEmp.employeeNumber);
                            String info3 = (pTEmp.gender);
                            String info4 = formatSalary.format(pTEmp.hourlyWage);
                            String info5 = Float.toString(pTEmp.hoursPerWeek);
                            String info6 = Integer.toString(pTEmp.weeksPerYear);
                            String info7 = Double.toString(pTEmp.deductionsRate);

                            data.writeToFile(info0);
                            data.writeToFile(info1);
                            data.writeToFile(info2);
                            data.writeToFile(info3);
                            data.writeToFile(info4);
                            data.writeToFile(info5);
                            data.writeToFile(info6);
                            data.writeToFile(info7);
                            data.writeToFile("");
                        }
                    }
                }
            }
            //if an error occurs, an error message is displayed
        } catch (IOException e) {
            displayField.setText(e.getMessage());
        }

        //a success message is displayed to indicate to the user that the save was complete
        displayField.setText("Save Complete");
    }//GEN-LAST:event_saveActionPerformed

    //this method stores what was written in the textfile into the hash table
    private void readActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readActionPerformed
        //a try and catch loop is used to 
        //display an error message to the user if something goes wrong

        //this method uses the ReadFile class to read each line on the stored file
        try {
            ReadFile file = new ReadFile(FILENAME);
            String[] aryLines = file.OpenFile();
            int numOfLines = file.readLines();

            //a while loop was used to ensure that the program stops reading after the last line
            int i = 0;
            while (i < numOfLines) {

                //since the first line indicates whether its full time or a part time employee
                //this value, i, is used as the reference value to determine all the other properties of the employee
                if (aryLines[i].equals("Full Time")) {
                    //every next line is stored in a variable
                    String eName = aryLines[i + 1];
                    int eNum = Integer.parseInt(aryLines[i + 2]);
                    String sex = aryLines[i + 3];
                    double salary = Double.parseDouble(aryLines[i + 4]);
                    double dRate = Double.parseDouble(aryLines[i + 5]);

                    //a new reference employee is made using these variables
                    FullTimeEmployee someEmployee = new FullTimeEmployee(eNum, eName, sex, salary, dRate);

                    //this employee is added to the hash table
                    openHash.add(someEmployee);

                    //the reference value "i" is changed to 6 - the line with the employee type
                    //so it can go through this loop again
                    i = i + 7;
                } else if (aryLines[i].equals("Part Time")) {
                    //a similar process applies to the part time employees, only with different variables
                    String eName = aryLines[i + 1];
                    int eNum = Integer.parseInt(aryLines[i + 2]);
                    String sex = aryLines[i + 3];
                    double eWage = Double.parseDouble(aryLines[i + 4]);
                    float hours = Float.parseFloat(aryLines[i + 5]);
                    int weeks = Integer.parseInt(aryLines[i + 6]);
                    double dRate = Double.parseDouble(aryLines[i + 7]);

                    PartTimeEmployee someEmployee = new PartTimeEmployee(eNum, eName, sex, eWage, hours, weeks, dRate);
                    openHash.add(someEmployee);

                    i = i + 9;
                }
            }
        } catch (IOException e) {
            //an error message is displayed if an error occurs
            displayField.setText(e.getMessage());
        }

        //a success message is displayed to the user
        displayField.setText("Employee Information read from text file");
    }//GEN-LAST:event_readActionPerformed

    //this method is used to calculate the net income for a particular employee
    //this information, along with the employee's other properties, are displayed on the display field
    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        displayField.setText(null);

        //the number the user entered was used to search for that particular employee in the openHash.search() method
        int eNum = Integer.parseInt(employeeNumber.getText());
        Employee someEmployee = openHash.search(eNum);

        //checks if that employee is full time or part time
        if (someEmployee instanceof FullTimeEmployee) {

            //cast the employee as a full time employee
            FullTimeEmployee fTEmp = (FullTimeEmployee) someEmployee;

            //that employee's information are stored into different strings
            String info0 = ("Type: Full Time Employee");
            String info1 = ("First Name: " + fTEmp.firstName);
            String info2 = ("Employee Number: " + fTEmp.employeeNumber);
            String info3 = ("Gender: " + fTEmp.gender);

            //the yearly salary is formatted to two decimal places
            String info4 = ("Yearly Salary: $" + formatSalary.format(fTEmp.yearlySalary));
            String info5 = ("Deductions Rate: " + fTEmp.deductionsRate + "%");

            //the net income is calculated by accounting for the appropriate deductions
            double netIncome = fTEmp.yearlySalary * (1 - (fTEmp.deductionsRate / 100));

            String info6 = ("Net Annual Income: $" + netIncome);

            //the information strings are added together and are simutaneously displayed
            displayField.setText(info0 + "\n" + info1 + "\n" + info2 + "\n" + info3 + "\n" + info4 + "\n" + info5 + "\n" + "\n" + info6);
        } else if (someEmployee instanceof PartTimeEmployee) {
            //a similar process is applied to part time employees
            PartTimeEmployee pTEmp = (PartTimeEmployee) someEmployee;
            String info0 = ("Type: Part Time Employee");
            String info1 = ("First Name: " + pTEmp.firstName);
            String info2 = ("Employee Number: " + pTEmp.employeeNumber);
            String info3 = ("Gender: " + pTEmp.gender);
            String info4 = ("Hourly Wage: $" + pTEmp.hourlyWage);
            String info5 = ("Hours Per Week: " + pTEmp.hoursPerWeek);
            String info6 = ("Weeks Per Year: " + pTEmp.weeksPerYear);
            String info7 = ("Deductions Rate: " + pTEmp.deductionsRate + "%");

            //the difference between the treatment between full time and part time employees is that
            //the income for part time employees are deteremined by multiplying the amount of hours they worked in a year
            //deductions rate is also accounted for in this calculation
            double netIncome = pTEmp.hourlyWage * pTEmp.hoursPerWeek * pTEmp.weeksPerYear * (1 - (pTEmp.deductionsRate / 100));

            String info8 = ("Net Annual Income: $" + netIncome);

            displayField.setText(info0 + "\n" + info1 + "\n" + info2 + "\n" + info3 + "\n" + info4 + "\n" + info5 + "\n" + info6 + "\n" + info7 + "\n" + "\n" + info8);
        } else if (someEmployee == null) {
            //if the employee is not found, an error message is displayed
            displayField.setText("Employee not found");
        }
        //clear the employee number field so the user can input future data easier
        employeeNumber.setText(null);
    }//GEN-LAST:event_calculateActionPerformed

    private void deductionsRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deductionsRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deductionsRActionPerformed

    //when the add button is clicked, the bottom half containing the text fields and the "add employee" button is displayed
    //allowing the user to add employees
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        displayField.setText(null);

        //here, these features are set to visible
        tabbedPane.setVisible(true);
        label1.setVisible(true);
        label2.setVisible(true);
        label3.setVisible(true);
        label4.setVisible(true);
        label5.setVisible(false);
        gender.setVisible(true);
        employeeName.setVisible(true);
        addedNum.setVisible(true);
        deductionsR.setVisible(true);
        addEmployee.setVisible(true);
        saveEdit.setVisible(false);
    }//GEN-LAST:event_addActionPerformed

    private void genderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderActionPerformed
    }//GEN-LAST:event_genderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton addEmployee;
    private javax.swing.JTextField addedNum;
    private javax.swing.JButton calculate;
    private javax.swing.JTextField deductionsR;
    private javax.swing.JButton delete;
    private javax.swing.JTextArea displayField;
    private javax.swing.JButton edit;
    private javax.swing.JTextField employeeName;
    private javax.swing.JTextField employeeNumber;
    private javax.swing.JComboBox gender;
    private javax.swing.JTextField hourlyWage;
    private javax.swing.JTextField hoursPerWeek;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    private javax.swing.JLabel label4;
    private javax.swing.JLabel label5;
    private javax.swing.JButton print;
    private javax.swing.JButton read;
    private javax.swing.JButton save;
    private javax.swing.JButton saveEdit;
    private javax.swing.JButton search;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextField weeksPerYear;
    private javax.swing.JTextField yearlySalary;
    // End of variables declaration//GEN-END:variables
}
